priority -49

extends c

# We want to overwrite everything in parent ft.
priority -48
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet snipclassbird "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "bird"`}
{
public:
	${1}() =default;
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
	static int a;
	const int b;
	mutable int c;
};
endsnippet

snippet snipclassduck "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "duck"`}:${2:bird}
{
public:
	${1}() =default;
	${1/(\w+).*/$1/} (${3:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet snipclassinitlist "class initlist"
${1:ClassName}(${2:_arguments}):${3:arg1}(_$3),${4:arg2'}(_$4){
	//TODO
}
endsnippet

snippet snipclassfriend "class friend "
friend ${1:ClassName};//友元类的成员函数可以访问此类的所有成员包括私有成员
friend void $1::${2:func}(${3:arguments});//定义在类的外部需要声明
friend void $1::$2($3){//友元函数可以定义在类的内部
	//TODO 
	}
endsnippet


snippet snipclassinheaderfile "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

# vim:ft=snippets:
