priority -49

extends c

# We want to overwrite everything in parent ft.
priority -48
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet snipforv "$1.begin(), $1.end() (beginend)"
for(auto iter=${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(); iter!=$1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end();iter++){
	${VISUAL}$2
}
endsnippet

snippet snipforverase "$1.begin(), $1.end() (beginend)"
for(auto iter=${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(); iter!=$1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end();iter++){
	if(${3:0==*iter}){
		iter = $1.erase(iter);
	}else{
		++iter;
	}
}
endsnippet

snippet snipnamespace "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet snipusingdeclarefunc "using declare to a func"
using ${1:Name}=${2:returnType} (${3:Params});
$1 ${4:funcName};//declare funcName
$1 * ${4:funcName};//declare a func ptr
endsnippet

snippet snipusingptrtofunc "using a pointer to a func"
using ${1:pName}=${2:returnType}(*)(${3:Params});
$1 ${4:pfuncName};//declare a func ptr
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet snipfuncheader "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:
