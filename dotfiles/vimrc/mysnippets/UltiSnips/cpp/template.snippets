priority -49

extends c

# We want to overwrite everything in parent ft.
priority -48
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet sniptemplatefunc "templatefunc"
template<typename _T0,typename _T1,typename _T2>
_T0 ${1:funcname}(_T0 & ${2:param0}, _T1 * ${3:parma1})
{
	return;
}
endsnippet

snippet sniptemplateclass "templateclass"
template<typename _T> class ${1:classname}
{
	typedef _T valuetype;
	typedef typename std::vector<_T>::sizetype sizetype;
public:
	$1();
	sizetype size(){
		if(data==nullptr){
		return 0;
		}
		return *data.size();
	}
	bool check(const _T val){
		if(*data.find(val)){return true;}
		return false;
	}
	void push_back(const _T &val){
		data->push_back(val);
	}
	void push_back(const _T &&val){
		data->push_back(std::move(val));
	}

private:
	std::uniqueptr<std::vector<_T> > data;
}
endsnippet

# vim:ft=snippets:
