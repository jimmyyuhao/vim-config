###########################################################################
#                            TextMate Snippets                            #
###########################################################################

# We want to overwrite everything in parent ft.
priority -48

snippet snip#ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet snip#if "#if #endif" b
#if ${1:0}
${VISUAL}$0
#endif
endsnippet

snippet snipcmain "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}$0
	return 0;
}
endsnippet

snippet snipswitch
switch (${1:var})
{
	case ${2:case1}: 
		break;
		
	case ${3:case2}:
	case ${4:case3}://multi value one process
		break;
	default:
		${5}
		break;
}
endsnippet

snippet snipdefinewhile0 "define do while 0"
#define ${VISUAL}${0:name}(${1:param(a,b)}) do{\
		${2:process like a = a+b;}\
	}while(0)
endsnippet

snippet snipwhile "while"
while(${VISUAL}$0) {

}
endsnippet

snippet snipfor "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet snipforauto "for int loop (forauto)"
for (${4:auto} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}$0
}
endsnippet

snippet snipfprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet snipprintf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet snipstruct "struct"
#typedef struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0:/* data */}
}$1;
endsnippet

snippet sniptypedefptrtofunc "typedef a pointer to a func"
typedef ${1:returnType} (*${2:Name})(${3:Params});
endsnippet

snippet snipcfunc "c function" b
${1:void} ${2:function_name}($3)
{
	${VISUAL}$0
}
endsnippet

snippet snipcfuncvarparam "c var param function" b
int simple(int num,...)
{
	int i, result=0;
	va_list vl;     //va_list指针，用于va_start取可变参数，为char*
	va_start(vl,num);       //取得可变参数列表中的第一个值
	printf("num:%d, vl:%d\n",num,*vl);
	for (i = 0; i < (num-1); i++){//这里num表示可变参数列表中有多少个参数
		result = va_arg(vl, int);//这里把vl往后跳过4个字节（sizeof(int)大小）指向下一个参数，返回的是当前参数（而非下
一个参数）  
		printf("in for  result:%d,  *vl:%d\n", result, *vl);//这里打印下，可以看出，vl总是指向result后面的那个参数  
	}
	va_end(vl);//结束标志  

	return result;
}
endsnippet

global !p
def split_line(text):
	import textwrap
	lines = textwrap.wrap(text, 78 - 19)
	output = list()
	for line in lines:
		output.append('*' + ' '*19 + line)
	snip_line = snip.tabstops[4].end[0]
	snip.buffer.append(output, snip_line + 1)
	del snip.buffer[snip_line]
def get_args(arglist):
	args = [arg.strip() for arg in arglist.split(',') if arg]
	return args
endglobal

snippet snipheaderfileonce "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${VISUAL}$0

#endif /* end of include guard: $1 */
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet snipcfileheader "File Header" b
/******************************************************************************
* File:             `!p snip.rv = fn`
*
* Author:           ${2}
* Created:          `date +%m/%d/%y`
* Description:      ${4:${VISUAL}}
*****************************************************************************/
${0}
endsnippet

post_jump "if snip.tabstop == 0 : split_line(snip.tabstops[4].current_text)"
snippet snipcfuncheader "Function Header"
/******************************************************************************
* Function:         $1
* Description:      ${4:${VISUAL}}
* Where:`!p
snip.rv = ""
snip >> 2
args = get_args(t[2])
if args:
	for arg in args:
		snip.rv += '\n' + '*' + ' '*19 + arg + ' - TODO'
snip << 2
`
* Return:           $5
* Error:            $6
*****************************************************************************/
${1}($2){
	${0}
}
endsnippet
# vim:ft=snippets:
